javap(1)                    General Commands Manual                   javap(1)



Name
       javap - The Java Class File Disassembler

       Disassembles class files.

SYNOPSIS
       javap [ options ] classes


DESCRIPTION
       The  javap  command  disassembles  one  or more class files. Its output
       depends on the options used. If no options are used, javap  prints  out
       the  package,  protected,  and public fields and methods of the classes
       passed to it. javap prints its output to stdout.

          options
             Command-line options.

          classes
             List of one or more classes (separated by spaces) to be processed
             for  annotations  (such  as  DocFooter.class).  You may specify a
             class that can be found in the class path, by its file name  (for
             example, /home/user/myproject/src/DocFooter.class), or with a URL
             (for example, file:///home/user/myproject/src/DocFooter.class).


       For example, compile the following class declaration:

       import java.awt.*;
       import java.applet.*;

       public class DocFooter extends Applet {
               String date;
               String email;

               public void init() {
                       resize(500,100);
                       date = getParameter("LAST_UPDATED");
                       email = getParameter("EMAIL");
               }

               public void paint(Graphics g) {
                       g.drawString(date + " by ",100, 15);
                       g.drawString(email,290,15);
               }
       }


       The output from javap DocFooter.class yields:

       Compiled from "DocFooter.java"
       public class DocFooter extends java.applet.Applet {
         java.lang.String date;
         java.lang.String email;
         public DocFooter();
         public void init();
         public void paint(java.awt.Graphics);
       }


       The output from javap -c DocFooter.class yields:

       Compiled from "DocFooter.java"
       public class DocFooter extends java.applet.Applet {
         java.lang.String date;

         java.lang.String email;

         public DocFooter();
           Code:
              0: aload_0
              1: invokespecial #1                  // Method java/applet/Applet."<init>":()V
              4: return

         public void init();
           Code:
              0: aload_0
              1: sipush        500
              4: bipush        100
              6: invokevirtual #2                  // Method resize:(II)V
              9: aload_0
             10: aload_0
             11: ldc           #3                  // String LAST_UPDATED
             13: invokevirtual #4                  // Method getParameter:(Ljava/lang/String;)Ljava/lang/String;
             16: putfield      #5                  // Field date:Ljava/lang/String;
             19: aload_0
             20: aload_0
             21: ldc           #6                  // String EMAIL
             23: invokevirtual #4                  // Method getParameter:(Ljava/lang/String;)Ljava/lang/String;
             26: putfield      #7                  // Field email:Ljava/lang/String;
             29: return

         public void paint(java.awt.Graphics);
           Code:
              0: aload_1
              1: new           #8                  // class java/lang/StringBuilder
              4: dup
              5: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
              8: aload_0
              9: getfield      #5                  // Field date:Ljava/lang/String;
             12: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
             15: ldc           #11                 // String  by
             17: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
             20: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
             23: bipush        100
             25: bipush        15
             27: invokevirtual #13                 // Method java/awt/Graphics.drawString:(Ljava/lang/String;II)V
             30: aload_1
             31: aload_0
             32: getfield      #7                  // Field email:Ljava/lang/String;
             35: sipush        290
             38: bipush        15
             40: invokevirtual #13                 // Method java/awt/Graphics.drawString:(Ljava/lang/String;II)V
             43: return
       }


OPTIONS
          -help --help -?
             Prints out help message for javap.

          -version
             Prints out version information.

          -l Prints out line and local variable tables.

          -public
             Shows only public classes and members.

          -protected
             Shows only protected and public classes and members.

          -package
             Shows only package, protected, and public  classes  and  members.
             This is the default.

          -private -p
             Shows all classes and members.

          -Jflag
             Pass flag directly to the runtime system. Some examples:
             javap -J-version
             javap -J-Djava.security.manager -J-Djava.security.policy=MyPolicy MyClassName

          -s Prints internal type signatures.

          -sysinfo
             Shows  system  information  (path,  size,  date, MD5 hash) of the
             class being processed.

          -constants
             Shows static final constants.

          -c Prints out disassembled code, i.e., the  instructions  that  com-
             prise  the  Java bytecodes, for each of the methods in the class.
             These are documented in the Java Virtual Machine Specification @
             http://docs.oracle.com/javase/specs/.

          -verbose
             Prints stack size, number of locals and args for methods.

          -classpath path
             Specifies the path javap uses to look up classes. Overrides the
             default or the CLASSPATH environment variable if it is set.

          -bootclasspath path
             Specifies path from which to load bootstrap classes. By default,
             the bootstrap classes are the classes implementing the core Java
             platform located in jre/lib/rt.jar and several other jar files.

          -extdirs dirs
             Overrides location at which installed extensions are searched
             for. The default location for extensions is the value of
             java.ext.dirs.


SEE ALSO
       javac(1), java(1), jdb(1), javah(1), javadoc(1)

                                  18 Jul 2013                         javap(1)

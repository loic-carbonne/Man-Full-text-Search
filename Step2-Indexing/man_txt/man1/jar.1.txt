jar(1)                      General Commands Manual                     jar(1)



Name
       jar-The Java Archive Tool

       jar combines multiple files into a single JAR archive file.

SYNOPSIS
          Create jar file
             jar  c[v0Mmfe]  [manifest] [jarfile] [entrypoint] [-C dir] input-
             files [-Joption]

          Update jar file
             jar u[v0Mmfe] [manifest] [jarfile] [entrypoint] [-C  dir]  input-
             files [-Joption]

          Extract jar file
             jar x[vf] [jarfile] [inputfiles] [-Joption]

          List table of contents of jar file
             jar t[vf] [jarfile] [inputfiles] [-Joption]

          Add index to jar file
             jar i jarfile [-Joption]


       where:

          cuxtiv0Mmfe
             Options that control the jar command.

          jarfile
             Jar  file  to be created (c), updated (u), extracted (x), or have
             its table of contents viewed (t).  The  -f  option  and  filename
             jarfile  are  a  pair  --  if  either  is present, they must both
             appear. Note that omitting f and jarfile  accepts  a  "jar  file"
             from  standard  input  (for  x  and t) or sends the "jar file" to
             standard output (for c and u).

          inputfiles
             Files or directories, separated by spaces, to  be  combined  into
             jarfile  (for c and u), or to be extracted (for x) or listed (for
             t) from jarfile. All directories are processed  recursively.  The
             files are compressed unless option 0 (zero) is used.

          manifest
             Pre-existing  manifest  file  whose  name:  value pairs are to be
             included in MANIFEST.MF in the jar file. The -m option and  file-
             name  manifest are a pair -- if either is present, they must both
             appear. The letters m, f and e must appear in the same order that
             manifest, jarfile, entrypoint appear.

          entrypoint
             The name of the class that set as the application entry point for
             stand-alone applications bundled into executable jar file. The -e
             option  and  entrypoint  are a pair -- if either is present, they
             must both appear. The letters m, f and e must appear in the  same
             order that manifest, jarfile, entrypoint appear.

          -C dir
             Temporarily  changes directories to dir while processing the fol-
             lowing inputfiles argument. Multiple -C dir inputfiles  sets  are
             allowed.

          -Joption
             Option  to  be  passed  into the Java runtime environment. (There
             must be no space between -J and option).


DESCRIPTION
       The jar tool combines multiple files into a single  JAR  archive  file.
       jar  is  a general-purpose archiving and compression tool, based on ZIP
       and the ZLIB @
       http://www.gzip.org/zlib/ compression format. However, jar was designed
       mainly package java applets or applications into a single archive. When
       the components of an applet or application (files, images and sounds)
       are combined into a single archive, they can be downloaded by a java
       agent (like a browser) in a single HTTP transaction, rather than
       requiring a new connection for each piece. This dramatically improves
       download times. jar also compresses files and so further improves down-
       load time. In addition, it allows individual entries in a file to be
       signed by the applet author so that their origin can be authenticated.
       The syntax for the jar tool is almost identical to the syntax for the
       tar command. A jar archive can be used as a class path entry, whether
       or not it is compressed.

       Typical usage to combine files into a jar file is:

       % jar cf myFile.jar *.class


       In this example, all the class files in the current directory are
       placed into the file named myFile.jar. The jar tool automatically gen-
       erates a manifest file entry named META-INF/MANIFEST.MF. It is always
       the first entry in the jar file. The manifest file declares meta-infor-
       mation about the archive, and stores that data as name : value pairs.
       Refer to the JAR file specification @
       http://docs.oracle.com/javase/7/docs/tech-
       notes/guides/jar/jar.html#JAR%20Manifest for details explaining how the
       jar tool stores meta-information in the manifest file.

       If a jar file should include name : value pairs contained in an exist-
       ing manifest file, specify that file using the -m option:

       % jar cmf myManifestFile myFile.jar *.class


       An existing manifest file must end with a new line character.  jar does
       not parse the last line of a manifest file if it does not end with a
       new line character.


       Note:  A jar command that specifies cfm on the command line instead of
       cmf (the order of the m and -f options are reversed), the jar command
       line must specify the name of the jar archive first, followed by the
       name of the manifest file:
       % jar cfm myFile.jar myManifestFile *.class


       The manifest is in a text format inspired by RFC822 ASCII format, so it
       is easy to view and process manifest-file contents.

       To extract the files from a jar file, use x:

       % jar xf myFile.jar


       To extract individual files from a jar file, supply their filenames:

       % jar xf myFile.jar foo bar


       Beginning with version 1.3 of the JDK, the jar utility supports
       JarIndex @
       http://docs.oracle.com/javase/7/docs/tech-
       notes/guides/jar/jar.html#JAR_Index, which allows application class
       loaders to load classes more efficiently from jar files. If an applica-
       tion or applet is bundled into multiple jar files,  only the necessary
       jar files will be downloaded and opened to load classes. This perfor-
       mance optimization is enabled by running jar with the -ioption. It will
       generate package location information for the specified main jar file
       and all the jar files it depends on, which need to be specified in the
       Class-Path attribute of the main jar file's manifest.

       % jar i main.jar


       In this example, an INDEX.LIST file is inserted into the META-INF
       directory of main.jar.
       The application class loader uses the information stored in this file
       for efficient class loading.  For details about how location informa-
       tion is stored in the index file, refer to the JarIndex specification.
       To copy directories, first compress files in dir1 to stdout, then
       extract from stdin to dir2 (omitting the -f option from both jar com-
       mands):

       % (cd dir1; jar c .) | (cd dir2; jar x)


       To review command samples which use jar to opeate on jar files and jar
       file manifests, see Examples, below. Also refer to the jar trail of the
       Java Tutorial @
       http://docs.oracle.com/javase/tutorial/deployment/jar/.

OPTIONS
          c  Creates a new archive file named jarfile (if f is specified) or
             to standard output (if f and jarfile are omitted). Add to it the
             files and directories specified by inputfiles.

          u  Updates an existing file jarfile (when f is specified) by adding
             to it files and directories specified by inputfiles. For example:
             jar uf foo.jar foo.class
             would add the file foo.class to the existing jar file foo.jar.
             The -u option can also update the manifest entry, as given by
             this example:
             jar umf manifest foo.jar
             updates the foo.jar manifest with the name : value pairs in mani-
             fest.

          x  Extracts files and directories from jarfile (if f is specified)
             or standard input (if f and jarfile are omitted). If inputfiles
             is specified, only those specified files and directories are
             extracted. Otherwise, all files and directories are extracted.
             The time and date of the extracted files are those given in the
             archive.

          t  Lists the table of contents from jarfile (if f is specified) or
             standard input (if f and jarfile are omitted). If inputfiles is
             specified, only those specified files and directories are listed.
             Otherwise, all files and directories are listed.

          i  Generate index information for the specified jarfile and its
             dependent jar files. For example:
             jar i foo.jar

          would generate an INDEX.LIST file in foo.jar which contains location
          information for each package in foo.jar and all the jar files speci-
          fied in the Class-Path attribute of foo.jar. See the index example.

          f  Specifies the file jarfile to be created (c), updated (u),
             extracted (x), indexed (i), or viewed (t). The -f option and
             filename jarfile are a pair -- if present, they must both appear.
             Omitting f and jarfile accepts a jar file name from stdin(for x
             and t) or sends jar file to stdout (for c and u).

          v  Generates verbose output to standard output. Examples shown
             below.

          0  (zero) Store without using ZIP compression.

          M  Do not create a manifest file entry (for c and u), or delete a
             manifest file entry if one exists (for u).

          m  Includes name : value attribute pairs from the specified manifest
             file manifest in the file at META-INF/MANIFEST.MF. jar adds a
             name : value pair unless an entry already exists with the same
             name, in which case jar updates its value.
             On the command line, the letters m and f must appear in the same
             order that manifest and jarfile appear. Example use:
             jar cmf myManifestFile myFile.jar *.class
             You can add special-purpose name : value attribute pairs to the
             manifest that aren't contained in the default manifest. For exam-
             ple, you can add attributes specifying vendor information, ver-
             sion information, package sealing, or to make JAR-bundled appli-
             cations executable. See the Packaging Programs in JAR Files @
             http://docs.oracle.com/javase/tutorial/deployment/jar/ lesson in
             the Java Tutorial for examples of using the -m option.

          e  Sets entrypoint as the application entry point for stand-alone
             applications bundled into executable jar file. The use of this
             option creates or overrides the Main-Class attribute value in the
             manifest file. This option can be used during creation of jar
             file or while updating the jar file. This option specifies the
             application entry point without editing or creating the manifest
             file.
             For example, this command creates Main.jar where the Main-Class
             attribute value in the manifest is set to Main:
             jar cfe Main.jar Main Main.class
             The java runtime can directly invoke this application by running
             the following command:
             java -jar Main.jar
             If the entrypoint class name is in a package it may use either a
             dot (".") or slash ("/") character as the delimiter. For example,
             if Main.class is in a package called foo the entry point can be
             specified in the following ways:
             jar -cfe Main.jar foo/Main foo/Main.class
             or
             jar -cfe Main.jar foo.Main foo/Main.class
             Note:  specifying both -m and -e options together when the given
             manifest also contains the Main-Class attribute results in an
             ambigous Main.class specification, leading to an error and the
             jar creation or update operation is aborted.

          -C dir
             Temporarily changes directories (cd dir) during execution of the
             jar command while processing the following inputfiles argument.
             Its operation is intended to be similar to the -C option of the
             UNIX tar utility.
             For example, this command changes to the classes directory and
             adds the bar.class from that directory to foo.jar:
             jar uf foo.jar -C classes bar.class
             This command changes to the classes directory and adds to foo.jar
             all files within the classes directory (without creating a
             classes directory in the jar file), then changes back to the
             original directory before changing to the bin directory to add
             xyz.class to foo.jar.
             jar uf foo.jar -C classes . -C bin xyz.class
             If classes holds files bar1 and bar2, then here's what the jar
             file will contain using jar tf foo.jar:
             META-INF/
             META-INF/MANIFEST.MF
             bar1
             bar2
             xyz.class

          -Joption
             Pass option to the Java runtime environment, where option is one
             of the options described on the reference page for the java
             application launcher. For example, -J-Xmx48M sets the maximum
             memory to 48 megabytes. It is a common convention for -J to pass
             options to the underlying runtime environment.


COMMAND LINE ARGUMENT FILES
       To shorten or simplify the jar command line, you can specify one or
       more files that themselves contain arguments to the jar command (except
       -J options). This enables you to create jar commands of any length,
       overcoming command line limits imposed by the operating system.

       An argument file can include options and filenames. The arguments
       within a file can be space-separated or newline-separated. Filenames
       within an argument file are relative to the current directory, not rel-
       ative to the location of the argument file. Wildcards (*) that might
       otherwise be expanded by the operating system shell are not expanded.
       Use of the @ character to recursively interpret files is not supported.
       The -J options are not supported because they are passed to the
       launcher, which does not support argument files.

       When executing jar, pass in the path and name of each argument file
       with the @ leading character. When jar encounters an argument beginning
       with the character @, it expands the contents of that file into the
       argument list.
       The example below, classes.list holds the names of files output by a
       find command:

       % find . -name '*.class' -print > classes.list


       You can then execute the jar command on Classes.list by passing it to
       jar using argfile syntax:

       % jar cf my.jar @classes.list


       An argument file can specify a path, but any filenames inside the argu-
       ment file that have relative paths are relative to the current working
       directory, not to the path passed in. Here is an example:
       % jar @path1/classes.list


EXAMPLES
       To add all the files in a particular directory to an archive (overwrit-
       ing contents if the archive already exists). Enumerating verbosely
       (with the -v option) will tell you more information about the files in
       the archive, such as their size and last modified date.
       % ls
       1.au          Animator.class    monkey.jpg
       2.au          Wave.class        spacemusic.au
       3.au          at_work.gif

       % jar cvf bundle.jar *
       added manifest
       adding: 1.au(in = 2324) (out= 67)(deflated 97%)
       adding: 2.au(in = 6970) (out= 90)(deflated 98%)
       adding: 3.au(in = 11616) (out= 108)(deflated 99%)
       adding: Animator.class(in = 2266) (out= 66)(deflated 97%)
       adding: Wave.class(in = 3778) (out= 81)(deflated 97%)
       adding: at_work.gif(in = 6621) (out= 89)(deflated 98%)
       adding: monkey.jpg(in = 7667) (out= 91)(deflated 98%)
       adding: spacemusic.au(in = 3079) (out= 73)(deflated 97%)


       If you already have separate subdirectories for images, audio files and
       classes, you can combine them into a single jar file:
       % ls -F
       audio/ classes/ images/

       % jar cvf bundle.jar audio classes images
       added manifest
       adding: audio/(in = 0) (out= 0)(stored 0%)
       adding: audio/1.au(in = 2324) (out= 67)(deflated 97%)
       adding: audio/2.au(in = 6970) (out= 90)(deflated 98%)
       adding: audio/3.au(in = 11616) (out= 108)(deflated 99%)
       adding: audio/spacemusic.au(in = 3079) (out= 73)(deflated 97%)
       adding: classes/(in = 0) (out= 0)(stored 0%)
       adding: classes/Animator.class(in = 2266) (out= 66)(deflated 97%)
       adding: classes/Wave.class(in = 3778) (out= 81)(deflated 97%)
       adding: images/(in = 0) (out= 0)(stored 0%)
       adding: images/monkey.jpg(in = 7667) (out= 91)(deflated 98%)
       adding: images/at_work.gif(in = 6621) (out= 89)(deflated 98%)

       % ls -F
       audio/ bundle.jar classes/ images/


       To see the entry names in the jarfile, use the t option:
       % jar tf bundle.jar
       META-INF/
       META-INF/MANIFEST.MF
       audio/1.au
       audio/2.au
       audio/3.au
       audio/spacemusic.au
       classes/Animator.class
       classes/Wave.class
       images/monkey.jpg
       images/at_work.gif


       To add an index file to the jar file for speeding up class loading, use
       the i option.
       Example:


       If you split the inter-dependent classes for a stock trade application
       into three jar files: main.jar, buy.jar, and sell.jar.


       If you specify the Class-path attribute in the main.jar manifest as:
       Class-Path: buy.jar sell.jar


       then you can use the -i option to speed up the class loading time for
       your application:
       % jar i main.jar


       An INDEX.LIST file is inserted to the META-INF directory. This enables
       the application class loader to download the specified jar files when
       it is searching for classes or resources.

SEE ALSO
       The Jar Overview @
       http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jarGuide.html

       The Jar File Specification @
       http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html

       The JarIndex Spec @
       http://docs.oracle.com/javase/7/docs/tech-
       notes/guides/jar/jar.html#JAR_Index

       Jar Tutorial @
       http://docs.oracle.com/javase/tutorial/deployment/jar/index.html

       pack200(1)

                                  18 Jul 2013                           jar(1)

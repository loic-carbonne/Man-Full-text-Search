SYSTEMD-NSPAWN(1)               systemd-nspawn               SYSTEMD-NSPAWN(1)



NAME
       systemd-nspawn - Spawn a namespace container for debugging, testing and
       building

SYNOPSIS
       systemd-nspawn [OPTIONS...] [COMMAND [ARGS...]]

       systemd-nspawn -b [OPTIONS...] [ARGS...]

DESCRIPTION
       systemd-nspawn may be used to run a command or OS in a light-weight
       namespace container. In many ways it is similar to chroot(1), but more
       powerful since it fully virtualizes the file system hierarchy, as well
       as the process tree, the various IPC subsystems and the host and domain
       name.

       systemd-nspawn limits access to various kernel interfaces in the
       container to read-only, such as /sys, /proc/sys or /sys/fs/selinux.
       Network interfaces and the system clock may not be changed from within
       the container. Device nodes may not be created. The host system cannot
       be rebooted and kernel modules may not be loaded from within the
       container.

       Note that even though these security precautions are taken
       systemd-nspawn is not suitable for secure container setups. Many of the
       security features may be circumvented and are hence primarily useful to
       avoid accidental changes to the host system from the container. The
       intended use of this program is debugging and testing as well as
       building of packages, distributions and software involved with boot and
       systems management.

       In contrast to chroot(1) systemd-nspawn may be used to boot full
       Linux-based operating systems in a container.

       Use a tool like yum(8), debootstrap(8), or pacman(8) to set up an OS
       directory tree suitable as file system hierarchy for systemd-nspawn
       containers.

       Note that systemd-nspawn will mount file systems private to the
       container to /dev, /run and similar. These will not be visible outside
       of the container, and their contents will be lost when the container
       exits.

       Note that running two systemd-nspawn containers from the same directory
       tree will not make processes in them see each other. The PID namespace
       separation of the two containers is complete and the containers will
       share very few runtime objects except for the underlying file system.
       Use machinectl(1)'s login command to request an additional login prompt
       in a running container.

       systemd-nspawn implements the Container Interface[1] specification.

       As a safety check systemd-nspawn will verify the existence of
       /usr/lib/os-release or /etc/os-release in the container tree before
       starting the container (see os-release(5)). It might be necessary to
       add this file to the container tree manually if the OS of the container
       is too old to contain this file out-of-the-box.

OPTIONS
       If option -b is specified, the arguments are used as arguments for the
       init binary. Otherwise, COMMAND specifies the program to launch in the
       container, and the remaining arguments are used as arguments for this
       program. If -b is not used and no arguments are specifed, a shell is
       launched in the container.

       The following options are understood:

       -D, --directory=
           Directory to use as file system root for the container. If neither
           --directory= nor --image= are specified, the current directory will
           be used. May not be specified together with --image=.

       -i, --image=
           Disk image to mount the root directory for the container from.
           Takes a path to a regular file or to a block device node. The file
           or block device must contain a GUID Partition Table with a root
           partition which is mounted as the root directory of the container.
           Optionally, it may contain a home and/or a server data partition
           which are mounted to the appropriate places in the container. All
           these partitions must be identified by the partition types defined
           by the Discoverable Partitions Specification[2]. Any other
           partitions, such as foreign partitions, swap partitions or EFI
           system partitions are not mounted. May not be specified together
           with --directory=.

       -b, --boot
           Automatically search for an init binary and invoke it instead of a
           shell or a user supplied program. If this option is used, arguments
           specified on the command line are used as arguments for the init
           binary. This option may not be combined with --share-system.

       -u, --user=
           After transitioning into the container, change to the specified
           user-defined in the container's user database. Like all other
           systemd-nspawn features, this is not a security feature and
           provides protection against accidental destructive operations only.

       -M, --machine=
           Sets the machine name for this container. This name may be used to
           identify this container on the host, and is used to initialize the
           container's hostname (which the container can choose to override,
           however). If not specified, the last component of the root
           directory of the container is used.

       --uuid=
           Set the specified UUID for the container. The init system will
           initialize /etc/machine-id from this if this file is not set yet.

       --slice=
           Make the container part of the specified slice, instead of the
           default machine.slice.

       --private-network
           Disconnect networking of the container from the host. This makes
           all network interfaces unavailable in the container, with the
           exception of the loopback device and those specified with
           --network-interface= and configured with --network-veth. If this
           option is specified, the CAP_NET_ADMIN capability will be added to
           the set of capabilities the container retains. The latter may be
           disabled by using --drop-capability=.

       --network-interface=
           Assign the specified network interface to the container. This will
           remove the specified interface from the calling namespace and place
           it in the container. When the container terminates, it is moved
           back to the host namespace. Note that --network-interface= implies
           --private-network. This option may be used more than once to add
           multiple network interfaces to the container.

       --network-macvlan=
           Create a "macvlan" interface of the specified Ethernet network
           interface and add it to the container. A "macvlan" interface is a
           virtual interface that adds a second MAC address to an existing
           physical Ethernet link. The interface in the container will be
           named after the interface on the host, prefixed with "mv-". Note
           that --network-macvlan= implies --private-network. This option may
           be used more than once to add multiple network interfaces to the
           container.

       --network-veth
           Create a virtual Ethernet link ("veth") between host and container.
           The host side of the Ethernet link will be available as a network
           interface named after the container's name (as specified with
           --machine=), prefixed with "ve-". The container side of the
           Ethernet link will be named "host0". Note that --network-veth
           implies --private-network.

       --network-bridge=
           Adds the host side of the Ethernet link created with --network-veth
           to the specified bridge. Note that --network-bridge= implies
           --network-veth. If this option is used, the host side of the
           Ethernet link will use the "vb-" prefix instead of "ve-".

       -Z, --selinux-context=
           Sets the SELinux security context to be used to label processes in
           the container.

       -L, --selinux-apifs-context=
           Sets the SELinux security context to be used to label files in the
           virtual API file systems in the container.

       --capability=
           List one or more additional capabilities to grant the container.
           Takes a comma-separated list of capability names, see
           capabilities(7) for more information. Note that the following
           capabilities will be granted in any way: CAP_CHOWN,
           CAP_DAC_OVERRIDE, CAP_DAC_READ_SEARCH, CAP_FOWNER, CAP_FSETID,
           CAP_IPC_OWNER, CAP_KILL, CAP_LEASE, CAP_LINUX_IMMUTABLE,
           CAP_NET_BIND_SERVICE, CAP_NET_BROADCAST, CAP_NET_RAW, CAP_SETGID,
           CAP_SETFCAP, CAP_SETPCAP, CAP_SETUID, CAP_SYS_ADMIN,
           CAP_SYS_CHROOT, CAP_SYS_NICE, CAP_SYS_PTRACE, CAP_SYS_TTY_CONFIG,
           CAP_SYS_RESOURCE, CAP_SYS_BOOT, CAP_AUDIT_WRITE, CAP_AUDIT_CONTROL.
           Also CAP_NET_ADMIN is retained if --private-network is specified.
           If the special value "all" is passed, all capabilities are
           retained.

       --drop-capability=
           Specify one or more additional capabilities to drop for the
           container. This allows running the container with fewer
           capabilities than the default (see above).

       --link-journal=
           Control whether the container's journal shall be made visible to
           the host system. If enabled, allows viewing the container's journal
           files from the host (but not vice versa). Takes one of "no",
           "host", "try-host", "guest", "try-guest", "auto". If "no", the
           journal is not linked. If "host", the journal files are stored on
           the host file system (beneath /var/log/journal/machine-id) and the
           subdirectory is bind-mounted into the container at the same
           location. If "guest", the journal files are stored on the guest
           file system (beneath /var/log/journal/machine-id) and the
           subdirectory is symlinked into the host at the same location.
           "try-host" and "try-guest" do the same but do not fail if the host
           does not have persistant journalling enabled. If "auto" (the
           default), and the right subdirectory of /var/log/journal exists, it
           will be bind mounted into the container. If the subdirectory does
           not exist, no linking is performed. Effectively, booting a
           container once with "guest" or "host" will link the journal
           persistently if further on the default of "auto" is used.

       -j
           Equivalent to --link-journal=try-guest.

       --read-only
           Mount the root file system read-only for the container.

       --bind=, --bind-ro=
           Bind mount a file or directory from the host into the container.
           Either takes a path argument -- in which case the specified path
           will be mounted from the host to the same path in the container --,
           or a colon-separated pair of paths -- in which case the first
           specified path is the source in the host, and the second path is
           the destination in the container. The --bind-ro= option creates
           read-only bind mounts.

       --tmpfs=
           Mount a tmpfs file system into the container. Takes a single
           absolute path argument that specifies where to mount the tmpfs
           instance to (in which case the directory access mode will be chosen
           as 0755, owned by root/root), or optionally a colon-separated pair
           of path and mount option string, that is used for mounting (in
           which case the kernel default for access mode and owner will be
           chosen, unless otherwise specified). This option is particularly
           useful for mounting directories such as /var as tmpfs, to allow
           state-less systems, in particular when combined with --read-only.

       --setenv=
           Specifies an environment variable assignment to pass to the init
           process in the container, in the format "NAME=VALUE". This may be
           used to override the default variables or to set additional
           variables. This parameter may be used more than once.

       --share-system
           Allows the container to share certain system facilities with the
           host. More specifically, this turns off PID namespacing, UTS
           namespacing and IPC namespacing, and thus allows the guest to see
           and interact more easily with processes outside of the container.
           Note that using this option makes it impossible to start up a full
           Operating System in the container, as an init system cannot operate
           in this mode. It is only useful to run specific programs or
           applications this way, without involving an init system in the
           container. This option implies --register=no. This option may not
           be combined with --boot.

       --register=
           Controls whether the container is registered with systemd-
           machined(8). Takes a boolean argument, defaults to "yes". This
           option should be enabled when the container runs a full Operating
           System (more specifically: an init system), and is useful to ensure
           that the container is accessible via machinectl(1) and shown by
           tools such as ps(1). If the container does not run an init system,
           it is recommended to set this option to "no". Note that
           --share-system implies --register=no.

       --keep-unit
           Instead of creating a transient scope unit to run the container in,
           simply register the service or scope unit systemd-nspawn has been
           invoked in with systemd-machined(8). This has no effect if
           --register=no is used. This switch should be used if systemd-nspawn
           is invoked from within a service unit, and the service unit's sole
           purpose is to run a single systemd-nspawn container. This option is
           not available if run from a user session.

       --personality=
           Control the architecture ("personality") reported by uname(2) in
           the container. Currently, only "x86" and "x86-64" are supported.
           This is useful when running a 32-bit container on a 64-bit host. If
           this setting is not used, the personality reported in the container
           is the same as the one reported on the host.

       -q, --quiet
           Turns off any status output by the tool itself. When this switch is
           used, the only output from nspawn will be the console output of the
           container OS itself.

       -h, --help
           Print a short help text and exit.

       --version
           Print a short version string and exit.

EXAMPLE 1
           # yum -y --releasever=19 --nogpg --installroot=/srv/mycontainer --disablerepo='*' --enablerepo=fedora install systemd passwd yum fedora-release vim-minimal
           # systemd-nspawn -bD /srv/mycontainer

       This installs a minimal Fedora distribution into the directory
       /srv/mycontainer/ and then boots an OS in a namespace container in it.

EXAMPLE 2
           # debootstrap --arch=amd64 unstable ~/debian-tree/
           # systemd-nspawn -D ~/debian-tree/

       This installs a minimal Debian unstable distribution into the directory
       ~/debian-tree/ and then spawns a shell in a namespace container in it.

EXAMPLE 3
           # pacstrap -c -d ~/arch-tree/ base
           # systemd-nspawn -bD ~/arch-tree/

       This installs a mimimal Arch Linux distribution into the directory
       ~/arch-tree/ and then boots an OS in a namespace container in it.

EXAMPLE 4
           # mv ~/arch-tree /var/lib/container/arch
           # systemctl enable systemd-nspawn@arch.service
           # systemctl start systemd-nspawn@arch.service

       This makes the Arch Linux container part of the multi-user.target on
       the host.

EXAMPLE 5
           # btrfs subvolume snapshot / /.tmp
           # systemd-nspawn --private-network -D /.tmp -b

       This runs a copy of the host system in a btrfs snapshot.

EXAMPLE 6
           # chcon system_u:object_r:svirt_sandbox_file_t:s0:c0,c1 -R /srv/container
           # systemd-nspawn -L system_u:object_r:svirt_sandbox_file_t:s0:c0,c1 -Z system_u:system_r:svirt_lxc_net_t:s0:c0,c1 -D /srv/container /bin/sh

       This runs a container with SELinux sandbox security contexts.

EXIT STATUS
       The exit code of the program executed in the container is returned.

SEE ALSO
       systemd(1), chroot(1), yum(8), debootstrap(8), pacman(8),
       systemd.slice(5), machinectl(1)

NOTES
        1. Container Interface
           http://www.freedesktop.org/wiki/Software/systemd/ContainerInterface

        2. Discoverable Partitions Specification
           http://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/



systemd 215                                                  SYSTEMD-NSPAWN(1)
